total_fn=0;
type = typearr[k]
file_path = paste(file_dir, date," ", type,option, sep="");
#type_corr_file_path = paste("./type_corr/TypeCorr ", type, ".csv"  , sep="");
# load type corr value
#type_corr_table = read.csv(file=type_corr_file_path, header=FALSE, sep=",")
for (i in (0:9))
{
file_name_train = paste(file_path, "train_", i, ".csv", sep="");
# table-format data from a file named file_name_train
table_train = read.csv(file=file_name_train, header = FALSE)
if (common_neighbor && ncn)
{
idx = (3:(length(table_train[1,])-1))
}else if( common_neighbor&& !ncn)
{
idx = (3:(length(table_train[1,])-3))
#   }else if(!common_neighbor && degree)
#   {
#  idx = (3:(length(table_train[1,])-1))
}else
{
idx = (3:(length(table_train[1,])-5))
}
train=table_train[,idx]
# multiply type corr value
#if(type_corr)
#{
#  for (j in (1:length(type_corr_table[1,])))
#  {
#    train[,j] = table_train[,j+2]*type_corr_table[1,j]
#  }
# common neighbor
#  if (common_neighbor && ncn)
#  {
#    train[,length(train[1,])-3] = table_train[,length(table_train[1,])-4]
#    train[,length(train[1,])-2] = table_train[,length(table_train[1,])-3]
#    train[,length(train[1,])-1] = table_train[,length(table_train[1,])-2]
#    train[,length(train[1,])] = table_train[,length(table_train[1,])-1]
#  }else  if (common_neighbor && !ncn)
#  {
#    train[,length(train[1,])-1] = table_train[,length(table_train[1,])-2]
#    train[,length(train[1,])] = table_train[,length(table_train[1,])-1]
#  }else
#  {
# nothing
#  }
#}
# to make a model for classification, add label value as factor
train[,length(train[1,])+1] = as.factor(table_train[,length(table_train[1,])])
colnames(train)[length(train[1,])] <- "label"
file_name_test = paste(file_path, "test_", i, ".csv", sep="");
table_test = read.csv(file=file_name_test, header=FALSE)
test=table_test[,idx]
if(type_corr)
{
# multiply type corr value
for (j in (1:length(type_corr_table[1,])))
{
test[,j] = table_test[,j+2]*type_corr_table[1,j]
}
# common neighbor
if (common_neighbor && ncn)
{
test[,length(test[1,])-3] = table_test[,length(table_test[1,])-4]
test[,length(test[1,])-2] = table_test[,length(table_test[1,])-3]
test[,length(test[1,])-1] = table_test[,length(table_test[1,])-2]
test[,length(test[1,])] = table_test[,length(table_test[1,])-1]
}else  if (common_neighbor && !cn)
{
test[,length(test[1,])-1] = table_test[,length(table_test[1,])-2]
test[,length(test[1,])] = table_test[,length(table_test[1,])-1]
}else
{
# nothing
}
}
test_label = as.factor(table_test[,length(table_test[1,])])
if(wsrf_on)
{
model.wsrf <- wsrf(label~., data = train, weights = wei)
result <- predict.wsrf(model.wsrf, newdata = test, type="response")
# of TP
tp_row = result==1 & test_label==1
tp = length(test[tp_row,1])
total_tp  = total_tp + tp;
# of TN
tn_row=result==0 & test_label==0
tn = length(test[tn_row,1])
total_tn = total_tn + tn;
# of FP
fp_row=result==1 &test_label==0
fp = length(test[fp_row,1])
total_fp = total_fp + fp;
# of FN
fn_row=result==0 & test_label==1
fn = length(test[fn_row,1])
total_fn = total_fn + fn;
}else
{
model <- randomForest(label~., data=train, importance=TRUE, proximity=FALSE, ntree=100)
result <- predict(model, newdata = test, predict.all=TRUE)
# of TP
tp_row = result$aggregate==1 & test_label==1
tp = length(test[tp_row,1])
total_tp  = total_tp + tp;
# of TN
tn_row=result$aggregate==0 & test_label==0
tn = length(test[tn_row,1])
total_tn = total_tn + tn;
# of FP
fp_row=result$aggregate==1 &test_label==0
fp = length(test[fp_row,1])
total_fp = total_fp + fp;
# of FN
fn_row=result$aggregate==0 & test_label==1
fn = length(test[fn_row,1])
total_fn = total_fn + fn;
}
#accuracy
accuracy= (tp+tn)/(tp+tn+fp+fn)
#precision
precision = tp/(tp+fp)
#recall
recall = tp/(tp+fn)
# paste("[Acc:",accuracy, "][Prc:", precision, "(", tp,"/",fp, ")","][Rcl:", recall,"(", tp,"/",tn, ")","]")
print(paste(accuracy, precision, recall,  paste(tp,"/",fp, sep=""), paste(tp,"/",tn, sep=""), sep=","));
#  data ��?? ????
#file_write_name = paste(file_dir, date," ", type, option, sep="");
#write.table(x = table_test[tp_row,],file=paste(file_write_name, "tp.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
#write.table(x = table_test[tn_row,],file=paste(file_write_name, "tn.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
#write.table(x = table_test[fp_row,],file=paste(file_write_name, "fp.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
#write.table(x = table_test[fn_row,], file=paste(file_write_name, "fn.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
print(paste(i, "th finished "))
}
#accuracy
accuracy= (total_tp+total_tn)/(total_tp+total_tn+total_fp+total_fn)
#precision
precision = total_tp/(total_tp+total_fp)
#recall
recall = total_tp/(total_tp+total_fn)
fscore=2*(precision*recall)/(precision+recall)
result = paste(accuracy, fscore, precision, recall,  paste(total_tp,"/",total_tp+total_fp, sep=""), paste(total_tp,"/", total_tp+total_fn, sep=""), sep=",")
# write.table(x=total_imp, file=paste(file_dir, "result/", "output ", type, option,".csv", sep=""),row.names=TRUE, col.names =TRUE, append=TRUE)
writeLines(text=paste(file_path, result, sep="\t"), con=fileConn)
print(result);
fileConn2 <- file(paste(file_dir, typearr[k],  "result", option, ".txt", sep=""), open="at")
writeLines(text=paste(file_path, result, sep="\t"), con=fileConn2)
close(fileConn2)
}
writeLines("========================================", con=fileConn)
close(fileConn)
setwd("~/R")
#library(randomForest)
#library(wsrf)
comment= "weight false wsrf"
# filename: 160503 hasDisease pathlen2_cn_ncn_a1_final_test_0.csv
file_dir = "D:/workspace/LinkPredictionRefactoring_data/new_result/slap_undersampling_ncn/";
date = "170111"
option = " undersampling10_clusterpathlen2_randomforest1_";
typearr= c("hasSubstructure");
#  c("hasDisease", "causeDisease", "hasSubstructure","hasGeneFamily","causeSideEffect", "expressIn", "hasPathway", "hasChemicalOntology")# c("hasDisease", "causeDisease", "hasSubstructure","hasGeneFamily","causeSideEffect",   "expressIn","hasPathway", "hasChemicalOntology", "express", "proteinProteinInteraction");
wsrf_on = TRUE;
total_tp=0;
total_tn=0;
total_fp=0;
total_fn=0;
common_neighbor = TRUE
ncn = TRUE
wei = FALSE
type_corr = FALSE
fileConn <- file(paste(file_dir,  "result.txt", sep=""), open="at")
writeLines(paste("====================typecorr:", type_corr, "common neighbor:", common_neighbor, "====================","ncn :", ncn, "====================", "wsrf_on:", wsrf_on, sep="\t"), con=fileConn)
writeLines(option, fileConn);
writeLines(comment, fileConn);
for (k in (1:length(typearr)))
{
total_tp=0;
total_tn=0;
total_fp=0;
total_fn=0;
type = typearr[k]
file_path = paste(file_dir, date," ", type,option, sep="");
#type_corr_file_path = paste("./type_corr/TypeCorr ", type, ".csv"  , sep="");
# load type corr value
#type_corr_table = read.csv(file=type_corr_file_path, header=FALSE, sep=",")
for (i in (0:9))
{
file_name_train = paste(file_path, "train_", i, ".csv", sep="");
# table-format data from a file named file_name_train
table_train = read.csv(file=file_name_train, header = FALSE)
if (common_neighbor && ncn)
{
idx = (3:(length(table_train[1,])-1))
}else if( common_neighbor&& !ncn)
{
idx = (3:(length(table_train[1,])-3))
#   }else if(!common_neighbor && degree)
#   {
#  idx = (3:(length(table_train[1,])-1))
}else
{
idx = (3:(length(table_train[1,])-5))
}
train=table_train[,idx]
# multiply type corr value
#if(type_corr)
#{
#  for (j in (1:length(type_corr_table[1,])))
#  {
#    train[,j] = table_train[,j+2]*type_corr_table[1,j]
#  }
# common neighbor
#  if (common_neighbor && ncn)
#  {
#    train[,length(train[1,])-3] = table_train[,length(table_train[1,])-4]
#    train[,length(train[1,])-2] = table_train[,length(table_train[1,])-3]
#    train[,length(train[1,])-1] = table_train[,length(table_train[1,])-2]
#    train[,length(train[1,])] = table_train[,length(table_train[1,])-1]
#  }else  if (common_neighbor && !ncn)
#  {
#    train[,length(train[1,])-1] = table_train[,length(table_train[1,])-2]
#    train[,length(train[1,])] = table_train[,length(table_train[1,])-1]
#  }else
#  {
# nothing
#  }
#}
# to make a model for classification, add label value as factor
train[,length(train[1,])+1] = as.factor(table_train[,length(table_train[1,])])
colnames(train)[length(train[1,])] <- "label"
file_name_test = paste(file_path, "test_", i, ".csv", sep="");
table_test = read.csv(file=file_name_test, header=FALSE)
test=table_test[,idx]
if(type_corr)
{
# multiply type corr value
for (j in (1:length(type_corr_table[1,])))
{
test[,j] = table_test[,j+2]*type_corr_table[1,j]
}
# common neighbor
if (common_neighbor && ncn)
{
test[,length(test[1,])-3] = table_test[,length(table_test[1,])-4]
test[,length(test[1,])-2] = table_test[,length(table_test[1,])-3]
test[,length(test[1,])-1] = table_test[,length(table_test[1,])-2]
test[,length(test[1,])] = table_test[,length(table_test[1,])-1]
}else  if (common_neighbor && !cn)
{
test[,length(test[1,])-1] = table_test[,length(table_test[1,])-2]
test[,length(test[1,])] = table_test[,length(table_test[1,])-1]
}else
{
# nothing
}
}
test_label = as.factor(table_test[,length(table_test[1,])])
if(wsrf_on)
{
model.wsrf <- wsrf(label~., data = train, weights = wei)
result <- predict.wsrf(model.wsrf, newdata = test, type="response")
# of TP
tp_row = result==1 & test_label==1
tp = length(test[tp_row,1])
total_tp  = total_tp + tp;
# of TN
tn_row=result==0 & test_label==0
tn = length(test[tn_row,1])
total_tn = total_tn + tn;
# of FP
fp_row=result==1 &test_label==0
fp = length(test[fp_row,1])
total_fp = total_fp + fp;
# of FN
fn_row=result==0 & test_label==1
fn = length(test[fn_row,1])
total_fn = total_fn + fn;
}else
{
model <- randomForest(label~., data=train, importance=TRUE, proximity=FALSE, ntree=100)
result <- predict(model, newdata = test, predict.all=TRUE)
# of TP
tp_row = result$aggregate==1 & test_label==1
tp = length(test[tp_row,1])
total_tp  = total_tp + tp;
# of TN
tn_row=result$aggregate==0 & test_label==0
tn = length(test[tn_row,1])
total_tn = total_tn + tn;
# of FP
fp_row=result$aggregate==1 &test_label==0
fp = length(test[fp_row,1])
total_fp = total_fp + fp;
# of FN
fn_row=result$aggregate==0 & test_label==1
fn = length(test[fn_row,1])
total_fn = total_fn + fn;
}
#accuracy
accuracy= (tp+tn)/(tp+tn+fp+fn)
#precision
precision = tp/(tp+fp)
#recall
recall = tp/(tp+fn)
# paste("[Acc:",accuracy, "][Prc:", precision, "(", tp,"/",fp, ")","][Rcl:", recall,"(", tp,"/",tn, ")","]")
print(paste(accuracy, precision, recall,  paste(tp,"/",fp, sep=""), paste(tp,"/",tn, sep=""), sep=","));
#  data ��?? ????
#file_write_name = paste(file_dir, date," ", type, option, sep="");
#write.table(x = table_test[tp_row,],file=paste(file_write_name, "tp.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
#write.table(x = table_test[tn_row,],file=paste(file_write_name, "tn.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
#write.table(x = table_test[fp_row,],file=paste(file_write_name, "fp.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
#write.table(x = table_test[fn_row,], file=paste(file_write_name, "fn.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
print(paste(i, "th finished "))
}
#accuracy
accuracy= (total_tp+total_tn)/(total_tp+total_tn+total_fp+total_fn)
#precision
precision = total_tp/(total_tp+total_fp)
#recall
recall = total_tp/(total_tp+total_fn)
fscore=2*(precision*recall)/(precision+recall)
result = paste(accuracy, fscore, precision, recall,  paste(total_tp,"/",total_tp+total_fp, sep=""), paste(total_tp,"/", total_tp+total_fn, sep=""), sep=",")
# write.table(x=total_imp, file=paste(file_dir, "result/", "output ", type, option,".csv", sep=""),row.names=TRUE, col.names =TRUE, append=TRUE)
writeLines(text=paste(file_path, result, sep="\t"), con=fileConn)
print(result);
fileConn2 <- file(paste(file_dir, typearr[k],  "result", option, ".txt", sep=""), open="at")
writeLines(text=paste(file_path, result, sep="\t"), con=fileConn2)
close(fileConn2)
}
writeLines("========================================", con=fileConn)
close(fileConn)
setwd("~/R")
#library(randomForest)
#library(wsrf)
comment= "weight false wsrf"
# filename: 160503 hasDisease pathlen2_cn_ncn_a1_final_test_0.csv
file_dir = "D:/workspace/LinkPredictionRefactoring_data/new_result/slap_undersampling_ncn/";
date = "170111"
option = " undersampling10_clusterpathlen2_randomforest1_";
typearr= c("bind");
#  c("hasDisease", "causeDisease", "hasSubstructure","hasGeneFamily","causeSideEffect", "expressIn", "hasPathway", "hasChemicalOntology")# c("hasDisease", "causeDisease", "hasSubstructure","hasGeneFamily","causeSideEffect",   "expressIn","hasPathway", "hasChemicalOntology", "express", "proteinProteinInteraction");
wsrf_on = TRUE;
total_tp=0;
total_tn=0;
total_fp=0;
total_fn=0;
common_neighbor = TRUE
ncn = TRUE
wei = FALSE
type_corr = FALSE
fileConn <- file(paste(file_dir,  "result.txt", sep=""), open="at")
writeLines(paste("====================typecorr:", type_corr, "common neighbor:", common_neighbor, "====================","ncn :", ncn, "====================", "wsrf_on:", wsrf_on, sep="\t"), con=fileConn)
writeLines(option, fileConn);
writeLines(comment, fileConn);
for (k in (1:length(typearr)))
{
total_tp=0;
total_tn=0;
total_fp=0;
total_fn=0;
type = typearr[k]
file_path = paste(file_dir, date," ", type,option, sep="");
#type_corr_file_path = paste("./type_corr/TypeCorr ", type, ".csv"  , sep="");
# load type corr value
#type_corr_table = read.csv(file=type_corr_file_path, header=FALSE, sep=",")
for (i in (0:9))
{
file_name_train = paste(file_path, "train_", i, ".csv", sep="");
# table-format data from a file named file_name_train
table_train = read.csv(file=file_name_train, header = FALSE)
if (common_neighbor && ncn)
{
idx = (3:(length(table_train[1,])-1))
}else if( common_neighbor&& !ncn)
{
idx = (3:(length(table_train[1,])-3))
#   }else if(!common_neighbor && degree)
#   {
#  idx = (3:(length(table_train[1,])-1))
}else
{
idx = (3:(length(table_train[1,])-5))
}
train=table_train[,idx]
# multiply type corr value
#if(type_corr)
#{
#  for (j in (1:length(type_corr_table[1,])))
#  {
#    train[,j] = table_train[,j+2]*type_corr_table[1,j]
#  }
# common neighbor
#  if (common_neighbor && ncn)
#  {
#    train[,length(train[1,])-3] = table_train[,length(table_train[1,])-4]
#    train[,length(train[1,])-2] = table_train[,length(table_train[1,])-3]
#    train[,length(train[1,])-1] = table_train[,length(table_train[1,])-2]
#    train[,length(train[1,])] = table_train[,length(table_train[1,])-1]
#  }else  if (common_neighbor && !ncn)
#  {
#    train[,length(train[1,])-1] = table_train[,length(table_train[1,])-2]
#    train[,length(train[1,])] = table_train[,length(table_train[1,])-1]
#  }else
#  {
# nothing
#  }
#}
# to make a model for classification, add label value as factor
train[,length(train[1,])+1] = as.factor(table_train[,length(table_train[1,])])
colnames(train)[length(train[1,])] <- "label"
file_name_test = paste(file_path, "test_", i, ".csv", sep="");
table_test = read.csv(file=file_name_test, header=FALSE)
test=table_test[,idx]
if(type_corr)
{
# multiply type corr value
for (j in (1:length(type_corr_table[1,])))
{
test[,j] = table_test[,j+2]*type_corr_table[1,j]
}
# common neighbor
if (common_neighbor && ncn)
{
test[,length(test[1,])-3] = table_test[,length(table_test[1,])-4]
test[,length(test[1,])-2] = table_test[,length(table_test[1,])-3]
test[,length(test[1,])-1] = table_test[,length(table_test[1,])-2]
test[,length(test[1,])] = table_test[,length(table_test[1,])-1]
}else  if (common_neighbor && !cn)
{
test[,length(test[1,])-1] = table_test[,length(table_test[1,])-2]
test[,length(test[1,])] = table_test[,length(table_test[1,])-1]
}else
{
# nothing
}
}
test_label = as.factor(table_test[,length(table_test[1,])])
if(wsrf_on)
{
model.wsrf <- wsrf(label~., data = train, weights = wei)
result <- predict.wsrf(model.wsrf, newdata = test, type="response")
# of TP
tp_row = result==1 & test_label==1
tp = length(test[tp_row,1])
total_tp  = total_tp + tp;
# of TN
tn_row=result==0 & test_label==0
tn = length(test[tn_row,1])
total_tn = total_tn + tn;
# of FP
fp_row=result==1 &test_label==0
fp = length(test[fp_row,1])
total_fp = total_fp + fp;
# of FN
fn_row=result==0 & test_label==1
fn = length(test[fn_row,1])
total_fn = total_fn + fn;
}else
{
model <- randomForest(label~., data=train, importance=TRUE, proximity=FALSE, ntree=100)
result <- predict(model, newdata = test, predict.all=TRUE)
# of TP
tp_row = result$aggregate==1 & test_label==1
tp = length(test[tp_row,1])
total_tp  = total_tp + tp;
# of TN
tn_row=result$aggregate==0 & test_label==0
tn = length(test[tn_row,1])
total_tn = total_tn + tn;
# of FP
fp_row=result$aggregate==1 &test_label==0
fp = length(test[fp_row,1])
total_fp = total_fp + fp;
# of FN
fn_row=result$aggregate==0 & test_label==1
fn = length(test[fn_row,1])
total_fn = total_fn + fn;
}
#accuracy
accuracy= (tp+tn)/(tp+tn+fp+fn)
#precision
precision = tp/(tp+fp)
#recall
recall = tp/(tp+fn)
# paste("[Acc:",accuracy, "][Prc:", precision, "(", tp,"/",fp, ")","][Rcl:", recall,"(", tp,"/",tn, ")","]")
print(paste(accuracy, precision, recall,  paste(tp,"/",fp, sep=""), paste(tp,"/",tn, sep=""), sep=","));
#  data ��?? ????
#file_write_name = paste(file_dir, date," ", type, option, sep="");
#write.table(x = table_test[tp_row,],file=paste(file_write_name, "tp.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
#write.table(x = table_test[tn_row,],file=paste(file_write_name, "tn.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
#write.table(x = table_test[fp_row,],file=paste(file_write_name, "fp.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
#write.table(x = table_test[fn_row,], file=paste(file_write_name, "fn.csv", sep="_"), append = TRUE, sep=",", col.names = FALSE, row.names = FALSE)
print(paste(i, "th finished "))
}
#accuracy
accuracy= (total_tp+total_tn)/(total_tp+total_tn+total_fp+total_fn)
#precision
precision = total_tp/(total_tp+total_fp)
#recall
recall = total_tp/(total_tp+total_fn)
fscore=2*(precision*recall)/(precision+recall)
result = paste(accuracy, fscore, precision, recall,  paste(total_tp,"/",total_tp+total_fp, sep=""), paste(total_tp,"/", total_tp+total_fn, sep=""), sep=",")
# write.table(x=total_imp, file=paste(file_dir, "result/", "output ", type, option,".csv", sep=""),row.names=TRUE, col.names =TRUE, append=TRUE)
writeLines(text=paste(file_path, result, sep="\t"), con=fileConn)
print(result);
fileConn2 <- file(paste(file_dir, typearr[k],  "result", option, ".txt", sep=""), open="at")
writeLines(text=paste(file_path, result, sep="\t"), con=fileConn2)
close(fileConn2)
}
writeLines("========================================", con=fileConn)
close(fileConn)
