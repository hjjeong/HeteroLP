{
    "collab_server" : "",
    "contents" : "\nsetwd(\"~/R\")\n\nlibrary(wsrf)\nlibrary(randomForest)\n#comment= \"path, weight=F\"\n#160503 hasPathway pathlen2_cn_ncn_a2_final_train_6\n# filename: 160503 hasDisease pathlen2_cn_ncn_a1_final_test_0.csv\ndate = \"160503\"\noption = \" pathlen2_cn_ncn_a2_\";\noption2 = \" pathlen2_cn_ncn_a2_\";\n\nwei = TRUE\ncommon_neighbor = FALSE;#FALSE\nncn = FALSE;\ntypearr= c(\"DI_DI\", \"DR_DI\", \"DR_PW\", \"DR_SE\", \"GE_DI\", \"GE_DR\", \"GE_GE\", \"GO_GE\", \"PW_GE\", \"PW_PW\", \"TG_DI\", \"TG_DR\", \"TG_PW\")\n#(\"hasDisease\", \"causeDisease\", \"hasSubstructure\",\"hasGeneFamily\",\"causeSideEffect\",   \"expressIn\",\"hasPathway\", \"hasChemicalOntology\", \"\", \"proteinProteinInteraction\", \"\", \"\");\n# c(\"hasDisease\", \"causeDisease\", \"hasSubstructure\",\"hasGeneFamily\",\"causeSideEffect\",   \"expressIn\",\"hasPathway\", \"hasChemicalOntology\", \"express\", \"proteinProteinInteraction\", \"hasGO\", \"bind\");\n#c(\"DI_DI\", \"DR_DI\", \"DR_PW\", \"DR_SE\", \"GE_DI\", \"GE_DR\", \"GE_GE\", \"GO_GE\", \"PW_GE\", \"PW_PW\", \"TG_DI\", \"TG_DR\", \"TG_PW\")\n#NO DR_PW DR_SE\nwsrf_on = FALSE;\n\ntotal_tp=0; \ntotal_tn=0;\ntotal_fp=0;\ntotal_fn=0;\n\n\nfile_dir = \"./data/160518_KOREA_metapath_cn_ncn_a2/\";\n\nfileConn <- file(paste(file_dir,  \"result_final_FF.txt\", sep=\"\"), open=\"at\")\n\nwriteLines(paste(\"====================common neighbor:\", common_neighbor, \"====================\",\"ncn :\", ncn, \"====================\", \"wsrf_on:\", wsrf_on, \"==weights:\",wei, sep=\"\\t\"), con=fileConn)\nwriteLines(option2, fileConn);\nwriteLines(comment, fileConn);\n\nfor (k in (1:length(typearr)))\n{\n  \n  type = typearr[k]\n  file_path = paste(file_dir, date,\" \", type,option, sep=\"\");\n  \n  for (i in (0:9))\n  {\n    file_name_train = paste(file_path, \"train_\", i, \".csv\", sep=\"\"); \n    \n    # table-format data from a file named file_name_train \n    table_train = read.csv(file=file_name_train, header = FALSE)\n\n    if (common_neighbor && ncn)\n    {\n      idx = (3:(length(table_train[1,])-1))\n    }else if( common_neighbor&& !ncn)\n    {\n      idx = (3:(length(table_train[1,])-3))\n #   }else if(!common_neighbor && degree)\n      #   {\n      \n      #  idx = (3:(length(table_train[1,])-1))\n    }else\n    {\n      idx = (3:(length(table_train[1,])-5))\n    }\n    train=table_train[,idx]\n    \n    \n    # to make a model for classification, add label value as factor\n    train[,length(train[1,])+1] = as.factor(table_train[,length(table_train[1,])])\n    colnames(train)[length(train[1,])] <- \"label\"\n    \n    \n    file_name_test = paste(file_path, \"test_\", i, \".csv\", sep=\"\");\n    table_test = read.csv(file=file_name_test, header=FALSE)\n    \n    test=table_test[,idx]\n    \n    test_label = as.factor(table_test[,length(table_test[1,])])\n    \n    if(wsrf_on)\n    {\n      model.wsrf <- wsrf(label~., data = train, weights = wei, importance=TRUE, ntrees = 100 )\n      result <- predict.wsrf(model.wsrf, newdata = test, type=\"prob\")\n      \n      if(i==0)\n      {\n        probs_result <- cbind(result,table_test[,length(table_test[1,])])\n      }else\n      {\n        probs <- cbind(result, table_test[,length(table_test[1,])])\n        probs_result <- rbind(probs_result, probs)\n      }\n      \n      \n    }else\n    {\n      model <- randomForest(label~., data=train, importance=TRUE, proximity=FALSE, ntree=100)\n      result <- predict(model, newdata = test, predict.all=TRUE)\n      \n      tp_row = result$aggregate==1 & test_label==1\n      tp = length(test[tp_row,1])\n      total_tp  = total_tp + tp;\n      # of TN\n      tn_row=result$aggregate==0 & test_label==0\n      tn = length(test[tn_row,1])\n      total_tn = total_tn + tn;\n      # of FP\n      fp_row=result$aggregate==1 &test_label==0\n      fp = length(test[fp_row,1])\n      total_fp = total_fp + fp;\n      # of FN\n      fn_row=result$aggregate==0 & test_label==1\n      fn = length(test[fn_row,1])\n      total_fn = total_fn + fn;\n    }\n    probs_result_final<- rbind(probs_result[probs_result[,3]==1, c(2,3)], probs_result[probs_result[,3]==0, c(1,3)])\n    \n    idx <-  order(probs_result_final[,1], decreasing = TRUE)\n    probs_result_final <- probs_result_final[idx,]\n    write.table(x=probs_result_final, file=paste(file_write_name, \"probability.csv\", sep=\"_\"), sep=\",\", col.names = FALSE, row.names = FALSE, append = FALSE)\n    \n  }\n  \n}\nwriteLines(\"========================================\", con=fileConn)\nclose(fileConn)\n\n",
    "created" : 1476756861580.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1172057642",
    "id" : "6198DCAA",
    "lastKnownWriteTime" : 1476756861,
    "last_content_update" : 1476756861,
    "path" : "C:/Users/HJJeong/Downloads/linkprediction_rf.r",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 6,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}